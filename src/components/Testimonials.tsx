import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import './Testimonials.css';

const Testimonials: React.FC = () => {
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1
  });
  
  const [currentIndex, setCurrentIndex] = useState(0);

  const testimonials = [
    {
      avatar: "üë®‚Äçüíª",
      quote: "–ò–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–º–æ–≥ –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã Agile –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ.",
      author: "–ê–ª–µ–∫—Å–µ–π",
      position: "Project Manager",
      company: "Tech Solutions"
    },
    {
      avatar: "üë©‚Äçüíº",
      quote: "–ë–ª–∞–≥–æ–¥–∞—Ä—è –ø—Ä–æ–≥—Ä–∞–º–º–µ —è –Ω–∞—É—á–∏–ª–∞—Å—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏ –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏.",
      author: "–ú–∞—Ä–∏—è",
      position: "Team Lead",
      company: "Digital Agency"
    },
    {
      avatar: "üë®‚ÄçüöÄ",
      quote: "–û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–µ–æ—Ä–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ IT-–ø—Ä–æ–µ–∫—Ç–∞–º–∏.",
      author: "–î–º–∏—Ç—Ä–∏–π",
      position: "Product Owner",
      company: "Startup Hub"
    },
    {
      avatar: "üë©‚Äçüî¨",
      quote: "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–∞–ª–∞ –º–Ω–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–æ–π.",
      author: "–ï–ª–µ–Ω–∞",
      position: "Scrum Master",
      company: "Innovation Lab"
    }
  ];

  const nextTestimonial = () => {
    setCurrentIndex((prevIndex) => (prevIndex + 1) % testimonials.length);
  };

  const prevTestimonial = () => {
    setCurrentIndex((prevIndex) => (prevIndex - 1 + testimonials.length) % testimonials.length);
  };

  const variants = {
    enter: (direction: number) => ({
      x: direction > 0 ? 300 : -300,
      opacity: 0
    }),
    center: {
      x: 0,
      opacity: 1
    },
    exit: (direction: number) => ({
      x: direction < 0 ? 300 : -300,
      opacity: 0
    })
  };

  const [direction, setDirection] = useState(0);

  const handleNext = () => {
    setDirection(1);
    nextTestimonial();
  };

  const handlePrev = () => {
    setDirection(-1);
    prevTestimonial();
  };

  return (
    <section id="testimonials" className="testimonials section">
      <div className="bg-pattern"></div>
      <div className="container">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="section-header"
        >
          <h2 className="section-title">–ß—Ç–æ –≥–æ–≤–æ—Ä—è—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏?</h2>
          <p className="section-subtitle">
            –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–±—É—á–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
          </p>
        </motion.div>

        <div className="testimonials-content" ref={ref}>
          <motion.div 
            className="testimonial-text"
            initial={{ opacity: 0, y: 30 }}
            animate={inView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
            transition={{ duration: 0.6, delay: 0.2 }}
          >
            <p>
              –ù–∞—à–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏ –æ—Ç–º–µ—á–∞—é—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∫–æ–º–∞–Ω–¥–æ–π 
              –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ú–Ω–æ–≥–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ–¥—Ä–∏–ª–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã Agile –≤ —Å–≤–æ–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö 
              –∏ –¥–æ–±–∏–ª–∏—Å—å –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã.
            </p>
          </motion.div>
          
          <div className="testimonial-slider">
            <div className="slider-container">
              <AnimatePresence custom={direction} initial={false}>
                <motion.div 
                  key={currentIndex}
                  custom={direction}
                  variants={variants}
                  initial="enter"
                  animate="center"
                  exit="exit"
                  transition={{ duration: 0.5 }}
                  className="testimonial-card"
                >
                  <div className="testimonial-avatar">{testimonials[currentIndex].avatar}</div>
                  <div className="quote-icon">"</div>
                  <p className="testimonial-quote">
                    {testimonials[currentIndex].quote}
                  </p>
                  <div className="testimonial-author-info">
                    <p className="testimonial-author">{testimonials[currentIndex].author}</p>
                    <p className="testimonial-position">{testimonials[currentIndex].position}, {testimonials[currentIndex].company}</p>
                  </div>
                </motion.div>
              </AnimatePresence>
              
              <div className="slider-controls">
                <button className="control-btn prev" onClick={handlePrev}>
                  &#8592;
                </button>
                <div className="slider-dots">
                  {testimonials.map((_, index) => (
                    <button 
                      key={index} 
                      className={`dot ${index === currentIndex ? 'active' : ''}`}
                      onClick={() => {
                        setDirection(index > currentIndex ? 1 : -1);
                        setCurrentIndex(index);
                      }}
                    />
                  ))}
                </div>
                <button className="control-btn next" onClick={handleNext}>
                  &#8594;
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Testimonials; 